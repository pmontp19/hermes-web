---
import Button from './Button.astro';
import Icon from './Icon.astro';
import { getCollection, type CollectionEntry } from 'astro:content';

const allPosts = await getCollection('blog');
const recentPosts = allPosts
  .filter((post: CollectionEntry<'blog'>) => !post.data.draft)
  .sort((a: CollectionEntry<'blog'>, b: CollectionEntry<'blog'>) => 
    b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
  )
  .slice(0, 3);

const formatDate = (date: Date | string) => {
  return new Date(date).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
};
---

<section class="py-20 bg-gray-50">
  <div class="container mx-auto px-4">
    <div class="text-center mb-16">
      <span class="text-toast-600 font-semibold">Blog</span>
      <h2 class="text-3xl md:text-4xl font-bold text-gray-800 mt-2 mb-4">
        Latest Articles
      </h2>
      <p class="max-w-2xl mx-auto text-lg text-gray-600">
        Stay updated with the latest trends, best practices, and expert advice in translation and localization.
      </p>
    </div>
    
    <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-8 mb-12">
      {recentPosts.map((post) => (
        <div class="bg-white rounded-xl shadow-md overflow-hidden hover:shadow-lg transition-shadow flex flex-col h-full">
          {/* Image section - fixed height */}
          {post.data.cover ? (
            <a href={`/blog/${post.slug}`} class="block">
              <img 
                src={post.data.cover.src.src} 
                alt={post.data.cover.alt || post.data.title} 
                class="w-full h-48 object-cover" 
              />
            </a>
          ) : (
            <div class="bg-toast-50 h-48 flex items-center justify-center">
              <span class="text-toast-600 font-semibold">Context Blog</span>
            </div>
          )}
          
          <div class="p-6 flex flex-col flex-grow">
            <div class="flex items-center text-sm mb-4">
              <span class="bg-toast-100 text-toast-600 px-2 py-1 rounded-full text-xs">{post.data.category}</span>
              <time datetime={post.data.pubDate.toISOString()} class="text-gray-500 text-xs ml-2">
                {formatDate(post.data.pubDate)}
              </time>
            </div>
            
            <div class="mb-4">
              <a href={`/blog/${post.slug}`} class="text-xl font-bold text-gray-900 hover:text-toast-600 transition-colors">
              {post.data.title}
              </a>
            </div>
            
            <div class="flex-grow mb-4">
              <p class="text-gray-600 line-clamp-3">{post.data.description}</p>
            </div>
            
            <div class="mt-auto pt-2">
              <Button href={`/blog/${post.slug}`} variant="link" class="inline-flex items-center text-sm">
                Read More 
                <Icon name="chevron-right" class="h-4 w-4 ml-1" />
              </Button>
            </div>
          </div>
        </div>
      ))}
    </div>
    
    <div class="text-center mb-16">
      <Button 
        href="/blog" 
        variant="primary"
        size="lg"
        class="inline-flex items-center"
      >
        View All Articles
        <Icon name="arrow-right" class="h-5 w-5 ml-1" />
      </Button>
    </div>

    <!-- Interactive Newsletter Signup -->
    <div class="max-w-3xl mx-auto bg-white rounded-xl shadow-md overflow-hidden">
      <div class="p-8">
        <div class="text-center mb-6">
          <h3 class="text-2xl font-bold text-gray-800 mb-2">Subscribe to Our Newsletter</h3>
          <p class="text-gray-600">Get the latest translation insights delivered to your inbox</p>
        </div>

        <form id="newsletter-form" class="space-y-4">
          <div class="grid md:grid-cols-2 gap-4">
            <div>
              <input 
                type="text" 
                id="newsletter-name" 
                placeholder="Your name" 
                class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-toast-400 focus:border-toast-400 outline-none"
                required
              />
              <p id="name-feedback" class="text-red-500 text-sm mt-1 hidden">Please enter your name</p>
            </div>
            
            <div>
              <input 
                type="email" 
                id="newsletter-email" 
                placeholder="Your email address" 
                class="w-full px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-toast-400 focus:border-toast-400 outline-none"
                required
              />
              <p id="email-feedback" class="text-red-500 text-sm mt-1 hidden">Please enter a valid email</p>
            </div>
          </div>
          
          <div class="flex items-start">
            <input 
              type="checkbox" 
              id="newsletter-consent" 
              class="mt-1 h-4 w-4 text-toast-500 focus:ring-toast-400 border-gray-300 rounded" 
              required
            />
            <label for="newsletter-consent" class="ml-2 text-sm text-gray-600">
              I agree to receive marketing communications from Context. You can unsubscribe anytime.
            </label>
          </div>
          <p id="consent-feedback" class="text-red-500 text-sm mt-1 hidden">Please confirm your consent</p>
          
          <div class="text-center">
            <Button 
              type="submit" 
              variant="primary"
              class="inline-flex items-center"
            >
              <span>Subscribe</span>
              <Icon name="chevron-right" class="h-5 w-5 ml-1" />
            </Button>
          </div>
          
          <div id="newsletter-success" class="hidden p-4 bg-green-100 text-green-700 rounded-lg text-center">
            Thank you for subscribing to our newsletter!
          </div>
        </form>
      </div>
    </div>
  </div>
</section>

<script>
  const newsletterForm = document.getElementById('newsletter-form') as HTMLFormElement;
  const nameInput = document.getElementById('newsletter-name') as HTMLInputElement;
  const emailInput = document.getElementById('newsletter-email') as HTMLInputElement;
  const consentCheckbox = document.getElementById('newsletter-consent') as HTMLInputElement;
  const nameFeedback = document.getElementById('name-feedback') as HTMLParagraphElement;
  const emailFeedback = document.getElementById('email-feedback') as HTMLParagraphElement;
  const consentFeedback = document.getElementById('consent-feedback') as HTMLParagraphElement;
  const successMessage = document.getElementById('newsletter-success') as HTMLDivElement;
  
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

  // Real-time validation for email
  if (emailInput) {
    emailInput.addEventListener('input', () => {
      if (emailFeedback) {
        emailFeedback.classList.add('hidden');
      }
    });
  }

  // Real-time validation for name
  if (nameInput) {
    nameInput.addEventListener('input', () => {
      if (nameFeedback) {
        nameFeedback.classList.add('hidden');
      }
    });
  }

  // Real-time validation for consent
  if (consentCheckbox) {
    consentCheckbox.addEventListener('change', () => {
      if (consentFeedback) {
        consentFeedback.classList.add('hidden');
      }
    });
  }

  // Form submission
  if (newsletterForm) {
    newsletterForm.addEventListener('submit', (e) => {
      e.preventDefault();
      let isValid = true;
      
      // Validate name
      if (nameInput && nameInput.value.trim() === '') {
        if (nameFeedback) {
          nameFeedback.classList.remove('hidden');
        }
        isValid = false;
      }
      
      // Validate email
      if (emailInput && !emailRegex.test(emailInput.value)) {
        if (emailFeedback) {
          emailFeedback.classList.remove('hidden');
        }
        isValid = false;
      }
      
      // Validate consent
      if (consentCheckbox && !consentCheckbox.checked) {
        if (consentFeedback) {
          consentFeedback.classList.remove('hidden');
        }
        isValid = false;
      }
      
      // If valid, show success message
      if (isValid) {
        newsletterForm.reset();
        if (successMessage) {
          successMessage.classList.remove('hidden');
        }
        
        // Hide success message after 5 seconds
        setTimeout(() => {
          if (successMessage) {
            successMessage.classList.add('hidden');
          }
        }, 5000);
      }
    });
  }
</script>