---
interface Props {
  variant?: 'primary' | 'secondary' | 'outline' | 'link' | 'linkSecondary';
  size?: 'sm' | 'md' | 'lg';
  href?: string;
  type?: 'button' | 'submit' | 'reset';
  class?: string;
  fullWidth?: boolean;
}

const {
  variant = 'primary',
  size = 'md',
  href,
  type = 'button',
  class: className = '',
  fullWidth = false,
  ...rest
} = Astro.props;

// Base classes
const baseClasses = 'inline-flex items-center justify-center font-medium transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-toast-500';

// Size classes
const sizeClasses = {
  sm: 'px-3 py-1.5 text-sm',
  md: 'px-4 py-2',
  lg: 'px-8 py-4 text-lg',
};

// Variant classes
const variantClasses = {
  primary: 'bg-toast-600 hover:bg-toast-700 text-white border border-transparent',
  secondary: 'bg-white text-toast-700 hover:bg-toast-50 border border-transparent',
  outline: 'bg-transparent hover:bg-toast-50 text-toast-600 border border-toast-600',
  link: 'bg-transparent hover:bg-transparent text-toast-600 hover:text-toast-700 border-none shadow-none focus:ring-0',
  linkSecondary: 'bg-transparent hover:bg-transparent text-toast-100 hover:text-white border-none shadow-none focus:ring-0',
};

const classes = [
  baseClasses,
  sizeClasses[size],
  variantClasses[variant],
  fullWidth ? 'w-full' : '',
  className,
].filter(Boolean).join(' ');

const Element = href ? 'a' : 'button';
---

<Element
  {...(href ? { href } : { type })}
  class={classes}
  {...rest}
>
  <slot />
</Element>