---
import Layout from '../../layouts/Layout.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import BlogPostCard from '../../components/BlogPostCard.astro';
import Button from '../../components/Button.astro';
import { getCollection, type CollectionEntry } from 'astro:content';

// Get all blog posts and sort by date
const allPosts = await getCollection('blog');
const sortedPosts = allPosts
  .filter((post: CollectionEntry<'blog'>) => !post.data.draft)
  .sort((a: CollectionEntry<'blog'>, b: CollectionEntry<'blog'>) => 
    b.data.pubDate.valueOf() - a.data.pubDate.valueOf()
  );

const featuredPost = sortedPosts[0];
const remainingPosts = sortedPosts.slice(1);
const categories = [...new Set(allPosts.map((post: CollectionEntry<'blog'>) => post.data.category))] as string[];

// Meta tags
const title = "Translation & Localization Blog | Context";
const description = "Expert insights, industry trends, and practical advice on translation, localization, and global communication for global businesses.";
const image = "/images/blog-social-card.jpg"; // Create this image with blog-related visuals

// Construct schema.org data for blog listing
const schemaData = {
  "@context": "https://schema.org",
  "@type": "CollectionPage",
  "name": "Context Blog - Translation Services",
  "description": description,
  "isPartOf": {
    "@type": "Blog",
    "name": "Context Blog",
    "publisher": {
      "@type": "Organization",
      "name": "Context",
      "logo": {
        "@type": "ImageObject",
        "url": new URL("/favicon.svg", Astro.site).toString()
      }
    }
  },
  "hasPart": sortedPosts.map(post => ({
    "@type": "BlogPosting",
    "headline": post.data.title,
    "description": post.data.description,
    "datePublished": post.data.pubDate.toISOString(),
    "author": {
      "@type": "Person",
      "name": post.data.author
    },
    "image": post.data.image ? new URL(post.data.image, Astro.site).toString() : undefined,
    "url": new URL(`/blog/${post.slug}`, Astro.site).toString()
  }))
};
---

<Layout 
  title={title}
  description={description}
  image={image}
  type="website"
>
  <script type="application/ld+json" set:html={JSON.stringify(schemaData)} slot="head" />
  
  <Header />
  <main>
    <!-- Hero Section -->
    <section class="bg-gradient-to-br from-toast-600 to-toast-800 text-white py-16">
      <div class="container mx-auto px-4 text-center">
        <h1 class="text-4xl md:text-5xl font-bold mb-4">Context Blog</h1>
        <p class="text-xl md:max-w-2xl mx-auto text-toast-50">
          Expert insights, industry trends, and practical advice on translation, localization, and global communication.
        </p>
      </div>
    </section>

    <section class="py-12 bg-gray-50">
      <div class="container mx-auto px-4">
        <!-- Featured Post -->
        {featuredPost && (
          <div class="mb-12">
            <h2 class="text-2xl font-bold mb-6 text-gray-800">Featured Article</h2>
            <BlogPostCard post={featuredPost} featured={true} />
          </div>
        )}

        <!-- Categories Filter -->
        <div class="mb-10">
          <h2 class="text-2xl font-bold mb-4 text-gray-800">Explore Topics</h2>
          <div class="flex flex-wrap gap-2">
            <a 
              href="/blog"
              class="bg-toast-500 text-white px-4 py-2 rounded-md text-sm font-medium hover:bg-toast-600 transition-colors"
            >
              All Posts
            </a>
            {categories.map((category: string) => (
              <Button 
                href={`/blog/category/${category.toLowerCase()}`}
                variant="outline"
                size="sm"
                class="!rounded-full"
              >
                {category}
              </Button>
            ))}
          </div>
        </div>

        <!-- All Posts Grid -->
        <div>
          <h2 class="text-2xl font-bold mb-6 text-gray-800">Latest Articles</h2>
          <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
            {remainingPosts.map((post: CollectionEntry<'blog'>) => (
              <BlogPostCard post={post} />
            ))}
          </div>
        </div>

        <!-- Newsletter Sign-up -->
        <div class="mt-16 bg-white p-8 rounded-xl shadow-md">
          <div class="max-w-3xl mx-auto text-center">
            <h3 class="text-2xl font-bold text-gray-800 mb-3">Subscribe to Our Newsletter</h3>
            <p class="text-gray-600 mb-6">Get the latest insights on translation and localization delivered to your inbox.</p>
            <form class="flex flex-col sm:flex-row gap-2">
              <input 
                type="email" 
                placeholder="Your email address" 
                class="flex-grow px-4 py-3 rounded-lg border border-gray-300 focus:ring-2 focus:ring-toast-400 focus:border-toast-400 outline-none"
                required
              />
              <Button 
                type="submit" 
                variant="primary"
              >
                Subscribe
              </Button>
            </form>
            <p class="text-xs text-gray-500 mt-3">We respect your privacy. Unsubscribe at any time.</p>
          </div>
        </div>
      </div>
    </section>
  </main>
  <Footer />
</Layout>