---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import Hero from '../components/Hero.astro';
import Services from '../components/Services.astro';
import Features from '../components/Features.astro';
import Testimonials from '../components/Testimonials.astro';
import Contact from '../components/Contact.astro';
import Footer from '../components/Footer.astro';
import Pricing from '../components/Pricing.astro';
import BlogPreview from '../components/BlogPreview.astro';

// Meta tags for the home page
const title = "Context - Professional Translation Services";
const description = "Professional translation and localization services for businesses worldwide. Quality, speed, and privacy guaranteed across 100+ languages.";
const image = "/images/home-social-card.jpg"; // Create a compelling image for social media shares
const canonicalURL = new URL(Astro.url.pathname, Astro.site);

// Construct schema.org data for organization and website
const schemaData = {
  "@context": "https://schema.org",
  "@graph": [
    {
      "@type": "Organization",
      "@id": new URL("#organization", Astro.site).toString(),
      "name": "Context",
      "url": Astro.site?.toString(),
      "logo": {
        "@type": "ImageObject",
        "url": new URL("/favicon.svg", Astro.site).toString()
      },
      "description": "Professional translation and localization services for businesses worldwide",
      "sameAs": [
        "https://twitter.com/contextranslation",
        "https://linkedin.com/company/context-translation"
      ]
    },
    {
      "@type": "WebSite",
      "@id": new URL("#website", Astro.site).toString(),
      "url": Astro.site?.toString(),
      "name": "Context",
      "publisher": {
        "@id": new URL("#organization", Astro.site).toString()
      }
    },
    {
      "@type": "Service",
      "name": "Translation Services",
      "description": "Professional translation services across multiple languages and industries.",
      "provider": {
        "@id": new URL("#organization", Astro.site).toString()
      },
      "serviceType": "Translation Services",
      "areaServed": "Worldwide",
      "offers": {
        "@type": "Offer",
        "price": "0.06",
        "priceCurrency": "USD",
        "priceSpecification": {
          "@type": "UnitPriceSpecification",
          "price": "0.06",
          "priceCurrency": "USD",
          "unitCode": "WORD",
          "referenceQuantity": {
            "@type": "QuantitativeValue",
            "value": "1",
            "unitCode": "WORD"
          }
        }
      }
    }
  ]
};
---

<Layout 
  title={title}
  description={description}
  image={image}
  canonicalURL={canonicalURL}
>
  <!-- Add JSON-LD Schema -->
  <script type="application/ld+json" set:html={JSON.stringify(schemaData)} slot="head" />
  
  <Header />
  <main>
    <div class="fade-in-section"><Hero /></div>
    <div class="fade-in-section"><Features /></div>
    <div class="fade-in-section"><Services /></div>
    <div class="fade-in-section"><Pricing /></div>
    <div class="fade-in-section"><Testimonials /></div>
    <div class="fade-in-section"><BlogPreview /></div>
    <div class="fade-in-section"><Contact /></div>
  </main>
  <Footer />
</Layout>

<style>
  .fade-in-section {
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 0.6s ease-out, transform 0.6s ease-out;
    will-change: opacity, transform;
  }

  .fade-in-section.is-visible {
    opacity: 1;
    transform: translateY(0);
  }
</style>

<script>
  const observerOptions = {
    root: null,
    rootMargin: '0px',
    threshold: 0.15
  };

  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        entry.target.classList.add('is-visible');
        // Once the animation is complete, we can stop observing the element
        observer.unobserve(entry.target);
      }
    });
  }, observerOptions);

  // Observe all sections
  document.addEventListener('DOMContentLoaded', () => {
    const sections = document.querySelectorAll('.fade-in-section');
    sections.forEach(section => observer.observe(section));
  });
</script>
